#!/usr/bin/env stack
{- stack script
  --resolver lts-16.22
  --package Glob
  --package ghc
  --package rio
-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wall -Werror #-}

module Main
    ( main
    ) where

import RIO

import Data.List (find, isSuffixOf)
import HieBin (HieFileResult(..))
import qualified HieBin
import HieTypes (HieFile(..))
import NameCache
import RIO.Directory (removeFile)
import System.FilePath.Glob (glob)
import qualified UniqSupply

main :: IO ()
main = runSimpleApp $ do
    (hies, hss) <-
        liftIO
        $ (\x y z -> (x, y <> z))
        <$> glob ".stack-work/**/*.hie"
        <*> glob ".stack-work/**/*.hs"
        <*> glob "**/*.hs"

    for_ hies $ \hie -> do
        hf <- readHieFile hie
        let hs = hie_hs_file hf
        logDebug $ fromString hie <> " => " <> fromString hs

        case find (hs `isSuffixOf`) hss of
            Nothing -> do
                logWarn
                    $ "Removing "
                    <> fromString hie
                    <> ", "
                    <> fromString hs
                    <> " does not exist"
                removeFile hie
            _ -> pure ()

-- https://github.com/wz1000/HieDb/blob/bb789d3ea09d040a980dbeb92d8749510c958125/src/HieDb/Dump.hs#L22
readHieFile :: MonadIO m => FilePath -> m HieFile
readHieFile path = liftIO $ do
    nameCache <- do
        uniqueSupply <- UniqSupply.mkSplitUniqSupply 'z'
        pure $ NameCache.initNameCache uniqueSupply []
    (result, _) <- HieBin.readHieFile nameCache path
    pure $ hie_file_result result

-- vim: ft=haskell
